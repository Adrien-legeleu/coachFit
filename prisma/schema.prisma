datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  Authenticator  Authenticator[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  isQuiz         Boolean         @default(false)
  age            Int?
  gender         String?
  height         Float?
  weight         Float?
  activity_level String?
  goals          Goal[] // Tableau d'objectifs

  status            String?
  bio               String?
  health_conditions String?
  speciality        Speciality[]
  tel               String?
  coach             Coach?       @relation("UserToCoach") // Relation sans fields et references
  coachId           String?
  Review            Review[]
}

model Goal {
  id     String @id @default(cuid())
  title  String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Speciality {
  id     String @id @default(cuid())
  title  String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Coach {
  id           String            @id @default(cuid())
  name         String
  email        String?           @unique
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  isQuiz       Boolean           @default(false)
  image        String?
  age          Int?
  tel          String
  gender       String?
  bio          String?
  price        Int?
  year_exp     String?
  note         Int?
  diplome      Diplome[]
  type_clients TypeClients[]
  speciality   SpecialityCoach[]
  userId       String?           @unique
  user         User?             @relation("UserToCoach", fields: [userId], references: [id]) // Associe un User Ã  un Coach ici
  reviews      Review[]
}

model Review {
  id        String   @id @default(cuid())
  content   String
  rating    Int
  userId    String
  coachId   String
  user      User     @relation(fields: [userId], references: [id])
  coach     Coach    @relation(fields: [coachId], references: [id])
  createdAt DateTime @default(now())
}

model TypeClients {
  id      String @id @default(cuid())
  title   String
  coachId String
  coach   Coach  @relation(fields: [coachId], references: [id])
}

model SpecialityCoach {
  id      String @id @default(cuid())
  title   String
  coachId String
  coach   Coach  @relation(fields: [coachId], references: [id])
}

model Diplome {
  id      String @id @default(cuid())
  title   String
  coachId String
  coach   Coach  @relation(fields: [coachId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
